package com.dataiku.dip.plugins.tradearea;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;

import com.dataiku.dip.shaker.types.GeoPoint;

class CircleAreaGeneratorTest {
    @Test
    public void testStandardGenerator() {
        double radius = 2;
        CircleAreaGenerator circleAreaGenerator = new CircleAreaGenerator(radius);
        GeoPoint.Coords coords = new GeoPoint.Coords(40.64749, -73.97237);
        String actualResult = circleAreaGenerator.generateArea(coords);
        String expectedResult = "POLYGON((-73.97237 40.66545630568238,-73.97113038296266 40.66543167685817,-73.96989416636922 40.6653578579459,-73.96866474131312 40.66523505144093,-73.9674454802129 40.665063594216804,-73.96623972753959 40.66484395659887,-73.96505079062158 40.6645767410712,-73.96388193055276 40.664262680619885,-73.96273635322873 40.663902636717864,-73.96161720053647 40.66349759695644,-73.96052754172119 40.66304867233032,-73.95947036495497 40.66255709418355,-73.95844856912997 40.66202421082494,-73.95746495589914 40.66145148382225,-73.9565222219864 40.66084048398552,-73.95562295178723 40.660192887050506,-73.9547696102805 40.659510469074384,-73.95396453627049 40.65879510155631,-73.95320993597811 40.65804874629633,-73.95250787699847 40.657273450007025,-73.95186028264165 40.656471338692555,-73.95126892667179 40.6556446118108,-73.95073542845908 40.654795536234666,-73.9502612485576 40.65392644002919,-73.94984768472095 40.65303970606156,-73.94949586836658 40.65213776546192,-73.94920676149793 40.651223090952556,-73.948981154093 40.650298190064134,-73.94881966196577 40.649365598257646,-73.94872272510646 40.64842787197078,-73.9486906065045 40.64748758160799,-73.94872339145742 40.6465473044934,-73.94882098736701 40.645609617806,-73.94898312402314 40.644677091516364,-73.94920935437403 40.64375228134437,-73.94949905578055 40.6428377217571,-73.94985143175083 40.641935919026125,-73.95026551415015 40.64104934436321,-73.9507401658796 40.640180427153105,-73.9512740840161 40.63933154830191,-73.95186580340483 40.638505033719284,-73.95251370069391 40.637703147952145,-73.95321599880016 40.63692808798724,-73.95397077179365 40.63618197723952,-73.95477595018704 40.63546685974261,-73.95562932661583 40.63478469455728,-73.95652856189311 40.63413735041307,-73.95747119142261 40.63352660059752,-73.95845463195249 40.6329541181071,-73.95947618865097 40.63242147107292,-73.96053306248504 40.63193011847352,-73.96162235788151 40.63148140614657,-73.96274109065003 40.63107656311012,-73.96388619614606 40.630716698203514,-73.9650545376522 40.63040279705695,-73.96624291495422 40.630135719397984,-73.96744807308957 40.62991619670218,-73.96866671124371 40.629744830194504,-73.96989549177077 40.629622089206414,-73.97113104931378 40.629548309893615,-73.97237 40.629523694317605,-73.97360895068621 40.629548309893615,-73.97484450822922 40.629622089206414,-73.97607328875628 40.629744830194504,-73.97729192691042 40.62991619670218,-73.97849708504579 40.630135719397984,-73.97968546234782 40.63040279705695,-73.98085380385393 40.630716698203514,-73.98199890934997 40.63107656311012,-73.98311764211849 40.63148140614657,-73.98420693751495 40.63193011847352,-73.98526381134903 40.63242147107292,-73.9862853680475 40.6329541181071,-73.98726880857738 40.63352660059752,-73.98821143810689 40.63413735041307,-73.98911067338416 40.63478469455728,-73.98996404981295 40.63546685974261,-73.99076922820636 40.63618197723952,-73.99152400119983 40.63692808798724,-73.99222629930608 40.637703147952145,-73.99287419659517 40.638505033719284,-73.9934659159839 40.63933154830191,-73.9939998341204 40.640180427153105,-73.99447448584985 40.64104934436321,-73.99488856824917 40.641935919026125,-73.99524094421945 40.6428377217571,-73.99553064562596 40.64375228134437,-73.99575687597685 40.644677091516364,-73.99591901263298 40.645609617806,-73.99601660854258 40.6465473044934,-73.9960493934955 40.64748758160799,-73.99601727489353 40.64842787197078,-73.99592033803422 40.649365598257646,-73.995758845907 40.650298190064134,-73.99553323850208 40.651223090952556,-73.99524413163341 40.65213776546192,-73.99489231527905 40.65303970606156,-73.9944787514424 40.65392644002919,-73.99400457154091 40.654795536234666,-73.99347107332821 40.6556446118108,-73.99287971735835 40.656471338692555,-73.99223212300153 40.657273450007025,-73.99153006402189 40.65804874629633,-73.9907754637295 40.65879510155631,-73.9899703897195 40.659510469074384,-73.98911704821276 40.660192887050506,-73.98821777801359 40.66084048398552,-73.98727504410085 40.66145148382225,-73.98629143087003 40.66202421082494,-73.98526963504503 40.66255709418355,-73.98421245827882 40.66304867233032,-73.98312279946353 40.66349759695644,-73.98200364677126 40.663902636717864,-73.98085806944725 40.664262680619885,-73.97968920937842 40.6645767410712,-73.97850027246041 40.66484395659887,-73.97729451978711 40.665063594216804,-73.97607525868689 40.66523505144093,-73.9748458336308 40.6653578579459,-73.97360961703734 40.66543167685817,-73.97237 40.66545630568238))";
        assertEquals(expectedResult, actualResult);
    }

    @Test
    public void testInvalidInput() {
        double radius = 9;
        CircleAreaGenerator generator = new CircleAreaGenerator(radius);
        String actualResult = generator.generateArea(null);
        assertNull(actualResult);
    }

    @Test
    public void testNullDistances() {
        double radius = 0;
        CircleAreaGenerator generator = new CircleAreaGenerator(radius);
        String str = "POINT(-73.9723 40.64749)";
        GeoPoint.Coords coords = GeoPoint.convert(str);
        String actualResult = generator.generateArea(coords);
        assertNull(actualResult);
    }
}
